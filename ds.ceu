/*{-{*/

changequote(<,>)
changequote(`,´)

/*
More formally, each mote maintains a counter c, a threshold k, and a timer t in 
the range [0, TAU].
k is a small, fixed integer (e.g., 1 or 2) and TAU is a time constant.

When a mote hears metadata identical to its own, it increments c.

At time t, the mote broadcasts its metadata if c < k.

When the interval of size TAU completes, c is reset to zero and t is reset to a 
new random value in the range [0, TAU].
To remove the short-listen effect, we modified Trickle slightly.
Instead of picking a t in the range [0, TAU], t is selected in the range [ 
TAU/2 , TAU ], defining a “listen-only” period of the first half of an 
interval.

By dynamically scaling TAU, Trickle can use its maintenance algorithm to 
rapidly propagate updates with a very small cost.
TAU has a lower bound, TAU_l , and an upper bound TAU_h.
When TAU expires, it doubles, up to TAU_h.
When a mote hears a summary with newer data than it has, it resets TAU to be 
TAU_l.
When a mote hears a summary with older code than it has, it sends the code, to 
bring the other mote up to date.
When a mote installs new code, it resets TAU to TAU_l, to make sure that it 
spreads quickly.
*/

C _dissemination_message_t = 20;    // TODO
C constant _DISSEMINATION_PROTO;
C constant _DISSEMINATION_TAU_L, _DISSEMINATION_TAU_H;
C constant _DISSEMINATION_K;
C do
    /******/
    #ifndef _DISSEMINATION_H
    #define _DISSEMINATION_H
    #define DISSEMINATION_PROTO 111
    #define DISSEMINATION_TAU_L 1000
    #define DISSEMINATION_TAU_H 65000
    #define DISSEMINATION_K     2
    typedef nx_struct {
        nx_uint16_t key;
        nx_uint32_t seqno;
        nx_uint8_t  data[0];
    } dissemination_message_t;
    #endif
    /******/
end

class DS_trickle with
    event void go_reset;
    event void go_inc;
    event void ok_fired;
do
    C _srand(), _rand(), _time();
    _srand(_TOS_NODE_ID);
    //_srand(_time(null)+_TOS_NODE_ID);

    var u16 tau = _DISSEMINATION_TAU_H;

    loop do
        var int c = 0;  // counter

        par/or do
            await (tau) ms;
            tau = tau * 2;
            if tau > _DISSEMINATION_TAU_H then
                tau = _DISSEMINATION_TAU_H;
            end
        with
            await this.go_reset;
            tau = _DISSEMINATION_TAU_L;
        with
            loop do
                await this.go_inc;
                c = c + 1;
            end
        with
            tmp u16 t;      // timer
            t = (tau/2) + _rand() % (tau/2);
            await (t)ms;
            if c < _DISSEMINATION_K then
                emit this.ok_fired;
            end
            await FOREVER;
        end
    end
end

class DS_drip with
    var u16 key;
    var u8  len;
    var DS_trickle trickle;

    event s8*  go_change;
    event s8*  ok_changed;
do
    event void send_data;
    var u32 seqno = 0;

    var _message_t msg;
        _Radio_setSource(&msg, _TOS_NODE_ID);
        _Radio_setDestination(&msg, _AM_BROADCAST_ADDR);

    var _dissemination_message_t* pay =
        _Radio_getPayload(&msg, sizeof<_dissemination_message_t>);
    pay:key = this.key;

    par do
        loop do
            par/or do
                // SEND METADATA WHEN TRICKLE EXPIRES
                await trickle.ok_fired;
                pay:seqno = seqno;
                _Radio_setType(&msg, _DISSEMINATION_PROTO);
                _Radio_setPayloadLength(&msg, sizeof<_dissemination_message_t>);
            with
                // SEND FULL DATA ON (INTERNAL) REQUEST
                await send_data;
                pay:seqno = seqno;
                _Radio_setType(&msg, _DISSEMINATION_PROTO+1);
                _Radio_setPayloadLength(&msg, sizeof<_dissemination_message_t>+this.len);
                // TODO: _assert(pay);
            end
            emit RADIO_SEND(&msg);
            await RADIO_SENDDONE;
        end
    with
        // AWAIT FOR CHANGES FROM THE APP
        loop do
            tmp s8* v = await go_change;
            _memcpy(pay:data, v, this.len);

            seqno = seqno >> 16;                        // increment seqno
            seqno = seqno + 1;
            if seqno == 0 then
                seqno = 1;
            end
            seqno = seqno << 16;
            seqno = seqno + _TOS_NODE_ID;

            emit trickle.go_reset;                      // reset trickle
            emit send_data;                             // broadcast new data
            emit this.ok_changed = pay:data;            // signal main app
        end
    with
        // RECEIVE META and DATA MESSAGES
        loop do
            tmp _message_t* gsm = await RADIO_RECEIVE;
            tmp int tp = _Radio_getType(gsm);

            tmp _dissemination_message_t* yap =
                _Radio_getPayload(gsm, sizeof<_dissemination_message_t>+this.len);

            if (tp==_DISSEMINATION_PROTO or tp==_DISSEMINATION_PROTO+1) and
                yap and (yap:key==this.key) then

                if seqno == yap:seqno then
                    emit trickle.go_inc;        // same data: inc trickle

                else/if seqno > yap:seqno then
                    // TODO: poderia esperar tempo aleatorio e so mandar se nao 
                    // receber de um vizinho
                    emit send_data;             // old data: send mine

                else/if seqno < yap:seqno then
                    emit trickle.go_reset;      // new data: reset trickle
                    if tp == _DISSEMINATION_PROTO+1 then
                        seqno = yap:seqno;      // update my data
                        _memcpy(pay:data, yap:data, this.len);
                        emit this.ok_changed=pay:data;
                    end
                end
            end
        end
    end
end

define(DS_neighbours, `/*{-{*/
dnl [ 1: msg_proto ] message protocol type
dnl [ 2: evt_retry ] event for retrying
dnl [ 3: neighs    ] bitmap of neighbours
dnl [ 4: n_neighs  ] max number of neighbours
do
    var Radio_receive recv;
        recv.proto = $1;
    _bm_clear($3, $4);
    par do
        loop do
            var _message_t msg_ng;
                _Radio_setSource(&msg_ng, _TOS_NODE_ID);
                _Radio_setType(&msg_ng, $1);
                _Radio_setDestination(&msg_ng, _AM_BROADCAST_ADDR);
            emit RADIO_SEND(&msg_ng);
            await $2;
        end
    with
        loop do
            var _message_t* msg_ng = await recv.ok_received;
            var u16 src = _Radio_getSource(msg_ng);
            if src < $4 then
                _bm_on($3, src);
            end
        end
    end
end
dnl * Sends an am_type broadcast message every retry event
dnl * Receives am_type messages / saves in nodes the source node
dnl * It never terminates!
/*}-}*/´)

dnl SORTING NETWORK
dnl DOCUMENT: tol. a falhas
dnl send sempre pode falhar
dnl     - ignorar retorno do send E sendDone
dnl         nao servem p/ nada ja que colisoes sempre acontecem
dnl link em apenas uma direcao
dnl sem buffers
dnl     - nos ligados a muitos nos
dnl     - pouca memoria
dnl     - mesmo assim pode haver overflow

define(DS_bcast_front, `/*{-{*/
dnl [ 1: msg_proto ] message protocol type
dnl [ 2: pay_type  ] message payload type being broadcast
dnl [ 3: n_buffer  ] max number of buffered messages
dnl [ 4: front_ms  ] frontier retry period
dnl [ 5: evt_recv  ] event to emit  net->app
dnl [ 6: evt_send  ] event to await app->net
do
    var $2[$3] buf;
    var u32 buf_n = 0;
    par do
        // awaits exactly the next message
        loop do
            var $2* recv_v;
            var _message_t* msg_bcast := @RADIO_receive($1, $2, recv_v);
            if buf_n == recv_v:seqno then  // TODO: % would restore lazy node
                buf[buf_n%$3] = *recv_v;
                recv_v = &buf[buf_n%$3];
                emit $5(recv_v);
                buf_n = buf_n + 1;
            end
        end
    with
        loop do
            var $2* recv_v = await $6;
            buf[buf_n%$3] = *recv_v;
            buf_n = buf_n + 1;
        end
    with
        // periodically broadcasts my frontier
        loop do
            await $4;
            var _message_t msg_bcast;
            var u32 v = buf_n;
            var int err = @RADIO_send_value(&msg_bcast, _AM_BROADCAST_ADDR,
                                        $1+1, u32, &v);
        end
    with
        // broadcasts requests from others frontiers
        loop do
            var u32* recv_v;
            var _message_t* msg_bcast_rcv := @RADIO_receive($1+1, u32, recv_v);
            if *recv_v < buf_n then
                var _message_t msg_bcast_snd;
                var int err = @RADIO_send_value(&msg_bcast_snd, 
                                            _AM_BROADCAST_ADDR,
                                            $1, $2, &buf[*recv_v%$3]);
            end
        end
    end
end
dnl SIMPLIFICACOES:
dnl * Aguardo somente o próximo 'seqno' e ignoro os outros.
dnl   Eles serão reenviados pelos outros nós mesmo que eu os guarde,
dnl   já que o meu UPDATE vai solicitar um menor ainda.
dnl * Envio apenas o menor 'seqno' solicitado, já que não tenho fila de saída.
dnl * NAO envio ao receber, apenas qdo for solicitado

dnl se um no ficar MUITO tempo fora ele tera um seqno que ninguem mais tem,
dnl portanto continuara fora (nesse caso assumimos que os nos PRECISAM
dnl de todas as msgs)
dnl mando no max u32 msgs
dnl nao terei uma diff maior que buffer size entre o sender e o pior receiver
dnl recebimento em ordem!!
/*}-}*/´)

dnl TODO: usar bcast_ack
define(DS_topology_hb_ack, `/*{-{*/
dnl [ 1: msg_proto ] message protocol type
dnl [ 2: heartbeat ] heartbeat period
dnl [ 3: nodes     ] bitmap of nodes X nodes
dnl [ 4: n_nodes   ] max number of nodes
dnl [ 5: evt_done  ] event emitted when topology is complete
C _Topo = 0;
C do
    typedef nx_struct {
        u8 v[eval($4*$4/8)];
    } Topo;
end
do
    par/or do
        var _message_t msg_topo;
        loop do
            await $2;
            var int err = @RADIO_send_value(&msg_topo, _AM_BROADCAST_ADDR,
                                        $1, _Topo, $3);
        end
    with
        loop do
            var _Topo* recv_v;
            var _message_t* msg_topo := @RADIO_receive($1, _Topo, recv_v);
            _bm_or($3, recv_v:v, $4*$4);
            var int allActive = do
                loop i, $4 do
                    if _bm_isZero(&$3[i*$4/8], $4) then
                        return 0;
                    end
                end
                return 1;
            end;
            if allActive then
                break;
            end
        end

        var u8[eval($4/8)] pending;
        _memcpy(pending, &$3[_TOS_NODE_ID*$4/8], $4/8);

        par do
            loop do
                var _message_t msg_topo;
                var int err = @RADIO_send_empty(&msg_topo, _AM_BROADCAST_ADDR, $1+1);
                await $2;
            end
        with
            loop do
                if _bm_isZero(pending, $4) then
                    break;
                end
                var _message_t* msg_topo := @RADIO_receive_empty($1+1);
                var u16 src = _Radio_getSource(msg_topo);
                _bm_off(pending, src);
            end
            emit $5;
        end
    end
end
dnl - Assume rede conectada no teste de terminação.
/*}-}*/´)

define(DS_topology_hb_diam, `/*{-{*/
dnl [ 1: msg_proto ] message protocol type
dnl [ 2: diameter  ] network diameter
dnl [ 3: heartbeat ] heartbeat period
dnl [ 4: nodes     ] bitmap of nodes X nodes
dnl [ 5: n_nodes   ] max number of nodes
C _Topo = 0;
C do
    typedef nx_struct {
        u8 v[eval($5*$5/8)];
    } Topo;
end
do
    par/or do
        var _message_t msg_topo;
        loop i, $2 do
            await $3;
            var int err = @RADIO_send_value(&msg_topo, _AM_BROADCAST_ADDR,
                                      $1, _Topo, $4);
        end
    with
        loop do
            var _Topo* recv_v;
            var _message_t* msg_topo := @RADIO_receive($1, _Topo, recv_v);
            _bm_or($4, recv_v:v, $5*$5);
        end
    end
end
dnl === FAULT TOLERANCE ===
dnl * FAIL!
dnl * Algoritmo assume que links são confiáveis.
dnl   - último send em N pode falhar: os nós ligados a N não recebem a última
dnl     atualização.
/*}-}*/´)

define(DS_probe_echo, `/*{-{*/
dnl [  1: msg_proto   ] message protocol type
dnl [  2: pay_type    ] payload type
dnl [  3: pay_final   ] aggregated payload
dnl [  4: ack_timeout ] ack retries
dnl [  5: neighs      ] bitmap of neighbours
dnl [  6: n_nodes     ] number of nodes
dnl [  7: f_neutral   ] function to neutralize a payload
dnl [  8: f_aggr      ] function to aggregate payloads
dnl [  9: evt_start   ] node ID that starts the probe
dnl [ 10: evt_gather  ] gather event
dnl [ 11: evt_done    ] event emitted when all echoes are received
do
    var int parent;
    //$7($3);         // f_neutral(pay_final)

    par do

        // PROBE: first
        par/or do
            await $9;
            parent = _TOS_NODE_ID;
        with
            var _message_t* msg_pb := @RADIO_receive_empty($1);
            parent = _Radio_getSource(msg_pb);
        end

        // forward PROBE to all neighbours
        var _message_t msg_pb;
        var void* pay_pb := @RADIO_msg(&msg_pb, $1, null);
        @RADIO_bcast_ack(&msg_pb, $5, $6, $4);

    with

        // PROBE: subsequent
        var _message_t* msg_pb := @RADIO_receive_ack($1, null, null);

        var _message_t msg_empty;
        var $2* pay_pb := @RADIO_msg(&msg_empty, $1+1, $2);
        $7(pay_pb);    // f_neutral(pay_pb)
        
        // send empty ECHO to !=parent
        loop do
            msg_pb := @RADIO_receive_ack($1, null, null);
            var int src = _Radio_getSource(msg_pb);
            if src != parent then
                @RADIO_send_ack(&msg_empty, src, $4);
            end
        end
        // FOREVER

    with

        // ECHO: aggregate
        var u8 [ eval($6/8) ] missing;
        _bm_copy(missing, $5, $6);
        _bm_off(missing, parent);

        par/and do
            // aggregate from all !=parent
            loop do
                var $2* pay_pb;
                var _message_t* msg_pb := @RADIO_receive($1+1, $2, pay_pb);
                var int src = _Radio_getSource(msg_pb);
                if _bm_get(missing, src) then
                    _bm_off(missing, src);
                    $8($3, pay_pb);    // f_aggr(final, pay_pb)
                    if _bm_isZero(missing, $6) then
                        break;
                    end
                end
            end
            // send to parent
            if parent != _TOS_NODE_ID then
                var _message_t msg_pb;
                @RADIO_send_value_ack(&msg_pb, parent, $1+1, $2, $3, $4);
            end
        with
            // gather/aggregate my value
            var $2* pay_pb = await $10;
            if pay_pb != null then
                $8($3, pay_pb);        // f_aggr(final, pay_pb)
            end
        end

        emit $11;

    with

        // ECHO: ack on receive
        loop do
            var _message_t* msg_pb := @RADIO_receive_ack($1+1, null, null);
        end
        // FOREVER

    end
end
/*}-}*/´)

/*}-}*/dnl
